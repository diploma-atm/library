/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (3.3.4).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package kz.diploma.adapter.access.api;

import kz.diploma.adapter.access.model.*;
import io.swagger.annotations.*;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;

@Validated
@Api(value = "AdapterController", description = "the AdapterController API")
public interface AdapterControllerApi {

    @ApiOperation(value = "", nickname = "getClient", notes = "", response = ClientResponse.class, tags={ "adapter-controller", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = ClientResponse.class) })
    @RequestMapping(value = "/adapter/client/{id}",
        produces = "*/*", 
        method = RequestMethod.GET)
    ResponseEntity<ClientResponse> getClient(@ApiParam(value = "",required=true) @PathVariable("id") Integer id);


    @ApiOperation(value = "", nickname = "getClient1", notes = "", response = ClientResponse.class, tags={ "adapter-controller", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = ClientResponse.class) })
    @RequestMapping(value = "/adapter/client/pan",
        produces = "*/*", 
        method = RequestMethod.GET)
    ResponseEntity<ClientResponse> getClient1(@NotNull @ApiParam(value = "", required = true) @Valid @RequestParam(value = "pan", required = true) String pan);


    @ApiOperation(value = "", nickname = "getClientByFio", notes = "", response = ClientResponse.class, responseContainer = "List", tags={ "adapter-controller", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = ClientResponse.class, responseContainer = "List") })
    @RequestMapping(value = "/adapter/client/fio",
        produces = "*/*", 
        method = RequestMethod.GET)
    ResponseEntity<List<ClientResponse>> getClientByFio(@NotNull @ApiParam(value = "", required = true) @Valid @RequestParam(value = "surname", required = true) String surname,@NotNull @ApiParam(value = "", required = true) @Valid @RequestParam(value = "name", required = true) String name,@NotNull @ApiParam(value = "", required = true) @Valid @RequestParam(value = "lastname", required = true) String lastname);


    @ApiOperation(value = "", nickname = "getClientByPhoneNumber", notes = "", response = ClientResponse.class, tags={ "adapter-controller", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = ClientResponse.class) })
    @RequestMapping(value = "/adapter/client/phone-number",
        produces = "*/*", 
        method = RequestMethod.GET)
    ResponseEntity<ClientResponse> getClientByPhoneNumber(@NotNull @ApiParam(value = "", required = true) @Valid @RequestParam(value = "phoneNumber", required = true) String phoneNumber);

}
